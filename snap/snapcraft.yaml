name: nepenthes
title: Nepenthes
license: MIT
base: core24
version: '1.2.0'
summary: A tarpit intended to catch web crawlers
description: |
  Nepenthes is a tarpit intended to catch web crawlers. It is developed by
  Aaron B. For more information about Nepenthes, please see:

  https://zadzmo.org/code/nepenthes/

  This snap package is maintained by Oliver Calder, and is not affiliated
  with nor endorsed by the upstream Nepenthes project or its author.

  ## Configuration

  By default, `nepenthes` listens on port 8893. To change this or other
  configuration settings, edit the config file:

  `/var/snap/nepenthes/current/config.yaml`

  Please see the upstream documentation for full configuration options:

  https://zadzmo.org/code/nepenthes/

  ## Training

  Nepenthes uses a markov corpus to populate generated pages with words. It
  is recommended that you provide training data to train the markov babbler.
  This can be done by sending arbitrary data to nepenthes, for example:

  `cat /path/to/file.txt | nepenthes.train-markov-corpus`

  If training is interrupted, you can skip lines you have already trained.
  For example, to skip the first 150 lines of the training file:

  `cat /path/to/file.txt | nepenthes.train-markov-corpus 150`

  If you wish to delete the markov corpus and start again, run:

  `nepenthes.delete-markov-corpus`

  ## License

  This snap package is licensed under the MIT license, the same license as the
  Nepenthes project.

grade: stable
confinement: strict

source-code:
  - https://zadzmo.org/downloads/nepenthes
  - https://github.com/olivercalder/nepenthes-snap
contact:
  - https://github.com/olivercalder/nepenthes-snap/issues
website:
  - https://zadzmo.org/code/nepenthes/
issues:
  - https://github.com/olivercalder/nepenthes-snap/issues

platforms:
  amd64:
  arm64:
  armhf:
  ppc64el:
  riscv64:
  s390x:

environment:
  # Tell nepenthes where to find core/microdyne.lua and core/nepenthes.lua
  NDIR: $SNAP
  # Tell lua where to find libraries
  LUA_PATH: $SNAP/?.lua;$SNAP/components/?.lua;$SNAP/usr/local/share/lua/5.4/?.lua;$SNAP/usr/local/share/lua/5.4/?/?.lua;$SNAP/usr/local/share/lua/5.4/?/init.lua;$SNAP/external/share/lua/5.4/?.lua;$SNAP/external/share/lua/5.4/?/?.lua;$SNAP/external/share/lua/5.4/?/init.lua;;
  LUA_CPATH: $SNAP/usr/local/lib/lua/5.4/?.so;$SNAP/usr/local/lib/lua/5.4/?/?.so;;

apps:
  nepenthes:
    command: launch-nepenthes
    daemon: simple
    plugs:
      - network-bind
  train-markov-corpus:
    command: train-markov-corpus
    plugs:
      - network # to POST to the nepenthes API
  delete-markov-corpus:
    command: delete-markov-corpus
    plugs:
      - network # to DELETE to the nepenthes API

parts:
  scripts:
    plugin: dump
    source: scripts
    source-type: local
  envsubst:
    # We need envsubst to set config variables at runtime
    plugin: nil
    stage-packages:
      - gettext
    prime:
      - usr/bin/envsubst # only keep the envsubst binary we care about
  dictionary:
    plugin: nil
    stage-packages:
      - wamerican-huge # use a large american wordlist by default
    prime:
      - usr/share/dict # only keep the word dictionary file
  nepenthes:
    plugin: dump
    source: https://zadzmo.org/downloads/nepenthes/file/nepenthes-1.2.tar.gz
    source-checksum: sha256/45cd8a09a662823e805446d96f6e29bd8328a23d066f1395fd6c3f5fe9422124
    stage-packages:
      - lua5.4
      - sqlite3
      - openssl
      - curl # to POST training data to the nepenthes API
    prime:
      - -config.yml # testing config from upstream
      - -docker # docker config
      - -external/lib # luarocks manifests
      - -load.sh # training script we don't use
      - -release # scripts to build release
      - -usr/share # changelogs, manpages, and readmes
  luarocks-packages:
    after:
      - nepenthes # so we have all the deps provided by the package manager
    plugin: make
    source: https://luarocks.github.io/luarocks/releases/luarocks-3.12.2.tar.gz
    build-packages:
      - liblua5.4-dev
      - libreadline-dev
      - unzip
      - libssl-dev
      - m4
      - libsqlite3-dev
    override-build: |
      ./configure --with-lua-include=/usr/include --rocks-tree=${CRAFT_PART_INSTALL}/usr/local
      make
      # Install luarocks to the path during build so we can use it to install
      # lua libraries which are not available in repos. We don't need to stage
      # luarocks itself, just the libraries it installs.
      make install
      luarocks config variables.LUA_INCDIR /usr/include/lua5.4
      luarocks install cqueues
      luarocks install luaossl
      luarocks install lpeg
      luarocks install lua-zlib
      luarocks install luadbi-sqlite3
      luarocks install lunix
    prime:
      - -usr/local/lib/luarocks # luarocks manifests
